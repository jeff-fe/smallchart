(()=>{"use strict";function t(t){return Math.min.apply(Math,t)}function e(t){return Math.max.apply(Math,t)}function i(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}class s{constructor(t){this.dom=t,this.width="",this.height="",this.svg="",this.max="",this.min="",this.margin=""}static init(t){return new s(t)}dealSeries(i){return i.map((i=>{const{data:s,limit:n=s.length}=i,r=function({data:i,limit:s,width:n=1,height:r=1,max:h=e(i),min:a=t(i),margin:l}){const o=i.length;s&&s<o&&(i=i.slice(o-s));const c=(r-2*l)/(h-a||2),u=(n-2*l)/((s||o)-(o>1?1:0));return i.map(((t,e)=>({x:e*u+l,y:(h===a?1:h-t)*c+l})))}({data:s,limit:n,width:this.width,height:this.height,max:this.max,min:this.min,margin:this.margin});return{...i,limit:n,pointArr:r}}))}createPath(t){const e=i("g");return this.dealSeries(t).forEach((t=>{switch(t.type){case"line":!function(t,e,s){let{pointArr:n,smooth:r}=t,h=function(t,e){let i;if(e){let e;i=t.map((t=>function(t){let i;if(e){const s=.5*(t.x-e.x);i=["C",e.x+s,e.y,t.x-s,t.y,t.x,t.y]}else i=[t.x,t.y];return e=t,i}(t))).reduce(((t,e)=>t.concat(e)))}else i=t.map((t=>[t.x,t.y])).reduce(((t,e)=>t.concat(e)));return i}(n,r);const a=h.concat([r?`L ${n[n.length-1].x}`:n[n.length-1].x,e.height-e.margin,e.margin,e.height-e.margin]);let l={...t,pointsPath:h,closePointsPath:a};r?function(t,e){let s=i("path");if(s.setAttribute("d",`M${e.pointsPath.join(" ")}`),s.setAttribute("stroke",e.stroke||"slategray"),s.setAttribute("stroke-width",e.strokeWidth||2),s.setAttribute("stroke-dasharray",e.strokeDasharray||"none"),s.setAttribute("fill","none"),t.appendChild(s),e.fill){let n=i("path");n.setAttribute("d",`M${e.closePointsPath.join(" ")}`),n.setAttribute("fill",e.fill),n.setAttribute("fill-opacity",e.fillOpacity||".2"),t.insertBefore(n,s)}}(s,l):function(t,e){let s=i("polyline");if(s.setAttribute("points",e.pointsPath),s.setAttribute("stroke",e.stroke||"slategray"),s.setAttribute("stroke-width",e.strokeWidth||2),s.setAttribute("stroke-dasharray",e.strokeDasharray||"none"),s.setAttribute("fill","none"),t.appendChild(s),e.fill){let n=i("polyline");n.setAttribute("points",e.closePointsPath),n.setAttribute("fill",e.fill),n.setAttribute("fill-opacity",e.fillOpacity||".2"),t.insertBefore(n,s)}}(s,l)}(t,this,e);break;case"bar":!function(t,e,s){let{pointArr:n,data:r,limit:h}=t;const a=e.margin?2*e.margin:0,l=r.length===h,o=l?(e.width-h*a)/h:n&&n.length>=2?Math.max(0,n[1].x-n[0].x-a):0;if(o<1)throw new Error("Too much data, please enlarge the width or reduce the margin");n.forEach(((n,h)=>{const c=l?Math.ceil((o+a)*h+e.margin):Math.ceil(n.x*h),u=Math.ceil(n.y),d=Math.ceil(o),m=Math.ceil(Math.max(0,e.height-n.y)),g=r[h];!function(t,e,{x:s,y:n,width:r,height:h,num:a}){let l=i("rect");l.setAttribute("x",s),l.setAttribute("y",n),l.setAttribute("width",r),l.setAttribute("height",h),l.setAttribute("num",a),l.setAttribute("fill",e.fill||"#409EFF"),t.appendChild(l)}(s,t,{x:c,y:u,width:d,height:m,num:g})}))}(t,this,e)}})),e}setOption(t={}){let{width:e=100,height:s=30,series:n,max:r,min:h,margin:a=2}=t;if(this.width=e,this.height=s,this.max=r,this.min=h,this.margin=a,!n)throw new Error("Please option must have series!");this.svg?(this.svg.innerHTML="",this.svg.appendChild(this.createPath(n))):(this.svg=i("svg"),this.svg.setAttribute("viewBox",`0 0 ${e} ${s}`),this.svg.setAttribute("style",`width:${e}px; height:${s}px`),this.svg.appendChild(this.createPath(n)),this.dom.appendChild(this.svg))}}const n=s;window.onload=function(){n.init(document.getElementById("line1")).setOption({series:[{data:[820,932,901,934,1290,1330,1320],type:"line",fill:"#8956FF",stroke:"#8956FF"}]}),n.init(document.getElementById("line2")).setOption({series:[{data:[820,932,901,934,1290,1330,1320],type:"line",fill:"#8956FF",stroke:"#8956FF",strokeWidth:4,smooth:!0}]}),n.init(document.getElementById("bar1")).setOption({series:[{data:[820,932,901,934,1290,1330,1320],type:"bar",fill:"#8956FF"}]})}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,