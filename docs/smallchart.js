(()=>{"use strict";function t(t){return Math.min.apply(Math,t)}function e(t){return Math.max.apply(Math,t)}function i(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}class s{constructor(t){this.dom=t,this.width="",this.height="",this.svg="",this.max="",this.min="",this.margin=""}static init(t){return new s(t)}dealSeries(i){return i.map((i=>{const{data:s,limit:r=s.length}=i,n=function({data:i,limit:s,width:r=1,height:n=1,max:a=e(i),min:h=t(i),margin:o}){const l=i.length;s&&s<l&&(i=i.slice(l-s));const c=(n-2*o)/(a-h||2),u=(r-2*o)/((s||l)-(l>1?1:0));return i.map(((t,e)=>({x:e*u+o,y:(a===h?1:a-t)*c+o})))}({data:s,limit:r,width:this.width,height:this.height,max:this.max,min:this.min,margin:this.margin});return{...i,limit:r,pointArr:n}}))}createPath(s){const r=i("g");return this.dealSeries(s).forEach((s=>{switch(s.type){case"line":!function(t,e,s){let{pointArr:r,smooth:n}=t,a=function(t,e){let i;if(e){let e;i=t.map((t=>function(t){let i;if(e){const s=.5*(t.x-e.x);i=["C",e.x+s,e.y,t.x-s,t.y,t.x,t.y]}else i=[t.x,t.y];return e=t,i}(t))).reduce(((t,e)=>t.concat(e)))}else i=t.map((t=>[t.x,t.y])).reduce(((t,e)=>t.concat(e)));return i}(r,n);const h=a.concat([n?`L ${r[r.length-1].x}`:r[r.length-1].x,e.height-e.margin,e.margin,e.height-e.margin]);let o={...t,pointsPath:a,closePointsPath:h};n?function(t,e){let s=i("path");if(s.setAttribute("d",`M${e.pointsPath.join(" ")}`),s.setAttribute("stroke",e.stroke||"slategray"),s.setAttribute("stroke-width",e.strokeWidth||2),s.setAttribute("stroke-dasharray",e.strokeDasharray||"none"),s.setAttribute("fill","none"),t.appendChild(s),e.fill){let r=i("path");r.setAttribute("d",`M${e.closePointsPath.join(" ")}`),r.setAttribute("fill",e.fill),r.setAttribute("fill-opacity",e.fillOpacity||".2"),t.insertBefore(r,s)}}(s,o):function(t,e){let s=i("polyline");if(s.setAttribute("points",e.pointsPath),s.setAttribute("stroke",e.stroke||"slategray"),s.setAttribute("stroke-width",e.strokeWidth||2),s.setAttribute("stroke-dasharray",e.strokeDasharray||"none"),s.setAttribute("fill","none"),t.appendChild(s),e.fill){let r=i("polyline");r.setAttribute("points",e.closePointsPath),r.setAttribute("fill",e.fill),r.setAttribute("fill-opacity",e.fillOpacity||".2"),t.insertBefore(r,s)}}(s,o)}(s,this,r);break;case"bar":!function(t,e,s){let{pointArr:r,data:n,limit:a}=t;const h=e.margin?2*e.margin:0,o=n.length===a,l=o?(e.width-a*h)/a:r&&r.length>=2?Math.max(0,r[1].x-r[0].x-h):0;if(l<1)throw new Error("Too much data, please enlarge the width or reduce the margin");r.forEach(((r,a)=>{const c=o?Math.ceil((l+h)*a+e.margin):Math.ceil(r.x*a),u=Math.ceil(r.y),d=Math.ceil(l),m=Math.ceil(Math.max(0,e.height-r.y)),p=n[a];!function(t,e,{x:s,y:r,width:n,height:a,num:h}){let o=i("rect");o.setAttribute("x",s),o.setAttribute("y",r),o.setAttribute("width",n),o.setAttribute("height",a),o.setAttribute("num",h),o.setAttribute("fill",e.fill||"#409EFF"),t.appendChild(o)}(s,t,{x:c,y:u,width:d,height:m,num:p})}))}(s,this,r)}s.markLine&&s.markLine.type&&function(s,r){const{markLine:n,pointArr:a}=s;let{type:h="average",stroke:o="#d14",strokeOpacity:l=1,strokeDasharray:c="2,2"}=n;const u=a.map((t=>t.y));let d="";switch(h){case"min":d=e(u);break;case"max":d=t(u);break;case"average":d=(m=u).reduce(((t,e)=>t+e))/m.length;break;case"median":d=function(t){return t.sort(((t,e)=>t-e))[Math.floor(t.length/2)]}(u)}var m;let p=i("line");p.setAttribute("shape-rendering","crispEdges"),p.setAttribute("stroke",o),p.setAttribute("stroke-opacity",l),p.setAttribute("stroke-dasharray",c),p.setAttribute("x1",a[0].x),p.setAttribute("y1",d),p.setAttribute("x2",a[a.length-1].x),p.setAttribute("y2",d),r.appendChild(p)}(s,r)})),r}setOption(t={}){let{width:e=100,height:s=30,series:r,max:n,min:a,margin:h=2}=t;if(this.width=e,this.height=s,this.max=n,this.min=a,this.margin=h,!r)throw new Error("Please option must have series!");this.svg?(this.svg.innerHTML="",this.svg.appendChild(this.createPath(r))):(this.svg=i("svg"),this.svg.setAttribute("viewBox",`0 0 ${e} ${s}`),this.svg.setAttribute("style",`width:${e}px; height:${s}px`),this.svg.appendChild(this.createPath(r)),this.dom.appendChild(this.svg))}}const r=s;window.onload=function(){r.init(document.getElementById("line1")).setOption({series:[{data:[820,932,901,934,1290,1330,1320],type:"line",fill:"#8956FF",stroke:"#8956FF"}]}),r.init(document.getElementById("line2")).setOption({series:[{data:[820,932,901,934,1290,1330,1320],type:"line",fill:"#8956FF",stroke:"#8956FF",strokeWidth:4,smooth:!0}]}),r.init(document.getElementById("bar1")).setOption({series:[{data:[820,932,901,934,1290,1330,1320],type:"bar",fill:"#8956FF"}]}),r.init(document.getElementById("line3")).setOption({series:[{data:[820,932,901,934,1290,1330,1320],type:"line",fill:"#8956FF",stroke:"#8956FF",markLine:{type:"average",stroke:"#d14",strokeOpacity:1,strokeDasharray:"2, 2"}}]})}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,