!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.smallchart=e():t.smallchart=e()}(self,(function(){return(()=>{"use strict";var t={155:(t,e,i)=>{function s(t){return Math.min.apply(Math,t)}function r(t){return Math.max.apply(Math,t)}function n(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}i.r(e),i.d(e,{default:()=>h});class o{constructor(t){this.dom=t,this.width="",this.height="",this.svg="",this.max="",this.min="",this.margin=""}static init(t){return new o(t)}dealSeries(t){return t.map((t=>{const{data:e,limit:i=e.length,smooth:n}=t,o=function({data:t,limit:e,width:i=1,height:n=1,max:o=r(t),min:h=s(t),margin:a}){const l=t.length;e&&e<l&&(t=t.slice(l-e));const u=(n-2*a)/(o-h||2),c=(i-2*a)/((e||l)-(l>1?1:0));return t.map(((t,e)=>({x:e*c+a,y:(o===h?1:o-t)*u+a})))}({data:e,limit:i,width:this.width,height:this.height,max:this.max,min:this.min,margin:this.margin});let h=function(t,e){let i;if(e){let e;i=t.map((t=>function(t){let i;if(e){const s=.5*(t.x-e.x);i=["C",e.x+s,e.y,t.x-s,t.y,t.x,t.y]}else i=[t.x,t.y];return e=t,i}(t))).reduce(((t,e)=>t.concat(e)))}else i=t.map((t=>[t.x,t.y])).reduce(((t,e)=>t.concat(e)));return i}(o,n);const a=h.concat([n?`L ${o[o.length-1].x}`:o[o.length-1].x,this.height-this.margin,this.margin,this.height-this.margin]);return{...t,pointsPath:h,closePointsPath:a}}))}createPath(t){const e=n("g");return this.dealSeries(t).forEach((t=>{switch(t.type){case"line":t.smooth?function(t,e){let i=n("path");if(i.setAttribute("d",`M${e.pointsPath.join(" ")}`),i.setAttribute("stroke",e.stroke||"slategray"),i.setAttribute("stroke-width",e.strokeWidth||2),i.setAttribute("stroke-dasharray",e.strokeDasharray||"none"),i.setAttribute("fill","none"),t.appendChild(i),e.fill){let s=n("path");s.setAttribute("d",`M${e.closePointsPath.join(" ")}`),s.setAttribute("fill",e.fill),s.setAttribute("fill-opacity",e.fillOpacity||".2"),t.insertBefore(s,i)}}(e,t):function(t,e){let i=n("polyline");if(i.setAttribute("points",e.pointsPath),i.setAttribute("stroke",e.stroke||"slategray"),i.setAttribute("stroke-width",e.strokeWidth||2),i.setAttribute("stroke-dasharray",e.strokeDasharray||"none"),i.setAttribute("fill","none"),t.appendChild(i),e.fill){let s=n("polyline");s.setAttribute("points",e.closePointsPath),s.setAttribute("fill",e.fill),s.setAttribute("fill-opacity",e.fillOpacity||".2"),t.insertBefore(s,i)}}(e,t)}})),e}setOption(t={}){let{width:e=100,height:i=30,series:s,max:r,min:o,margin:h=5}=t;if(this.width=e,this.height=i,this.max=r,this.min=o,this.margin=h,!s)throw new Error("Please option must have series!");this.svg?(this.svg.innerHTML="",this.svg.appendChild(this.createPath(s))):(this.svg=n("svg"),this.svg.setAttribute("viewBox",`0 0 ${e} ${i}`),this.svg.setAttribute("style",`width:${e}px; height:${i}px`),this.svg.appendChild(this.createPath(s)),this.dom.appendChild(this.svg))}}const h=o}},e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={exports:{}};return t[s](r,r.exports,i),r.exports}return i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(155)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,