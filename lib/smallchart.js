!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.smallchart=e():t.smallchart=e()}(self,(function(){return(()=>{"use strict";var t={155:(t,e,i)=>{function r(t){return Math.min.apply(Math,t)}function s(t){return Math.max.apply(Math,t)}function n(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}i.r(e),i.d(e,{default:()=>a});class h{constructor(t){this.dom=t,this.width="",this.height="",this.svg="",this.max="",this.min="",this.margin=""}static init(t){return new h(t)}dealSeries(t){return t.map((t=>{const{data:e,limit:i=e.length}=t,n=function({data:t,limit:e,width:i=1,height:n=1,max:h=s(t),min:a=r(t),margin:o}){const l=t.length;e&&e<l&&(t=t.slice(l-e));const c=(n-2*o)/(h-a||2),u=(i-2*o)/((e||l)-(l>1?1:0));return t.map(((t,e)=>({x:e*u+o,y:(h===a?1:h-t)*c+o})))}({data:e,limit:i,width:this.width,height:this.height,max:this.max,min:this.min,margin:this.margin});return{...t,limit:i,pointArr:n}}))}createPath(t){const e=n("g");return this.dealSeries(t).forEach((t=>{switch(t.type){case"line":!function(t,e,i){let{pointArr:r,smooth:s}=t,h=function(t,e){let i;if(e){let e;i=t.map((t=>function(t){let i;if(e){const r=.5*(t.x-e.x);i=["C",e.x+r,e.y,t.x-r,t.y,t.x,t.y]}else i=[t.x,t.y];return e=t,i}(t))).reduce(((t,e)=>t.concat(e)))}else i=t.map((t=>[t.x,t.y])).reduce(((t,e)=>t.concat(e)));return i}(r,s);const a=h.concat([s?`L ${r[r.length-1].x}`:r[r.length-1].x,e.height-e.margin,e.margin,e.height-e.margin]);let o={...t,pointsPath:h,closePointsPath:a};s?function(t,e){let i=n("path");if(i.setAttribute("d",`M${e.pointsPath.join(" ")}`),i.setAttribute("stroke",e.stroke||"slategray"),i.setAttribute("stroke-width",e.strokeWidth||2),i.setAttribute("stroke-dasharray",e.strokeDasharray||"none"),i.setAttribute("fill","none"),t.appendChild(i),e.fill){let r=n("path");r.setAttribute("d",`M${e.closePointsPath.join(" ")}`),r.setAttribute("fill",e.fill),r.setAttribute("fill-opacity",e.fillOpacity||".2"),t.insertBefore(r,i)}}(i,o):function(t,e){let i=n("polyline");if(i.setAttribute("points",e.pointsPath),i.setAttribute("stroke",e.stroke||"slategray"),i.setAttribute("stroke-width",e.strokeWidth||2),i.setAttribute("stroke-dasharray",e.strokeDasharray||"none"),i.setAttribute("fill","none"),t.appendChild(i),e.fill){let r=n("polyline");r.setAttribute("points",e.closePointsPath),r.setAttribute("fill",e.fill),r.setAttribute("fill-opacity",e.fillOpacity||".2"),t.insertBefore(r,i)}}(i,o)}(t,this,e);break;case"bar":!function(t,e,i){let{pointArr:r,data:s,limit:h}=t;const a=e.margin?2*e.margin:0,o=s.length===h,l=o?(e.width-h*a)/h:r&&r.length>=2?Math.max(0,r[1].x-r[0].x-a):0;if(l<1)throw new Error("Too much data, please enlarge the width or reduce the margin");r.forEach(((r,h)=>{const c=o?Math.ceil((l+a)*h+e.margin):Math.ceil(r.x*h),u=Math.ceil(r.y),p=Math.ceil(l),d=Math.ceil(Math.max(0,e.height-r.y)),m=s[h];!function(t,e,{x:i,y:r,width:s,height:h,num:a}){let o=n("rect");o.setAttribute("x",i),o.setAttribute("y",r),o.setAttribute("width",s),o.setAttribute("height",h),o.setAttribute("num",a),o.setAttribute("fill",e.fill||"#409EFF"),t.appendChild(o)}(i,t,{x:c,y:u,width:p,height:d,num:m})}))}(t,this,e)}})),e}setOption(t={}){let{width:e=100,height:i=30,series:r,max:s,min:h,margin:a=2}=t;if(this.width=e,this.height=i,this.max=s,this.min=h,this.margin=a,!r)throw new Error("Please option must have series!");this.svg?(this.svg.innerHTML="",this.svg.appendChild(this.createPath(r))):(this.svg=n("svg"),this.svg.setAttribute("viewBox",`0 0 ${e} ${i}`),this.svg.setAttribute("style",`width:${e}px; height:${i}px`),this.svg.appendChild(this.createPath(r)),this.dom.appendChild(this.svg))}}const a=h}},e={};function i(r){if(e[r])return e[r].exports;var s=e[r]={exports:{}};return t[r](s,s.exports,i),s.exports}return i.d=(t,e)=>{for(var r in e)i.o(e,r)&&!i.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(155)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,